#!/usr/bin/env python3import osimport jsonimport socketimport datetimeimport whoisdef get_whois(domain):    """Return WHOIS data as a JSON-serializable dict."""    try:        w = whois.whois(domain)  # returns a whois.parser.WhoisEntry (dict-like)        result = {}        for k, v in w.items():            # Normalize values so json can handle them            if isinstance(v, (list, tuple)):                result[k] = [                    vv.isoformat() if hasattr(vv, "isoformat") else str(vv)                    for vv in v                ]            elif hasattr(v, "isoformat"):  # datetime                result[k] = v.isoformat()            else:                result[k] = v        return result    except Exception as e:        return {"error": str(e)}def get_ip(domain):    """Resolve A record (IPv4)."""    try:        return socket.gethostbyname(domain)    except Exception:        return "IP not found"def scan_target(domain):    """Collect all data for one domain."""    print(f"Scanning: {domain}")    return {        "domain": domain,        "ip": get_ip(domain),        "whois": get_whois(domain),        "timestamp": datetime.datetime.utcnow().isoformat() + "Z",    }def save_report(data, folder="reports"):    """Save per-domain JSON."""    if not os.path.exists(folder):        os.makedirs(folder)    filename = os.path.join(folder, f"{data['domain']}.json")    with open(filename, "w") as f:        json.dump(data, f, indent=4, default=str)    print(f"âœ… Report saved: {filename}")if __name__ == "__main__":    # --- locate targets file ---    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))    target_path = os.path.join(BASE_DIR, "data", "targets.txt")    if not os.path.exists(target_path):        raise FileNotFoundError(f"targets.txt not found at: {target_path}")    # --- load targets ---    with open(target_path, "r") as f:        targets = [line.strip() for line in f if line.strip()]    print("âœ… Loaded targets:", targets)    # --- scan & save individual reports ---    summary = []    for domain in targets:        report = scan_target(domain)        save_report(report)        summary.append(report)    # --- save combined summary ---    summary_path = os.path.join("reports", "summary.json")    with open(summary_path, "w") as f:        json.dump(summary, f, indent=4, default=str)    print(f"ðŸ—‚ Combined summary saved: {summary_path}")    md_path = os.path.join("reports" "summary.md")with open(md_path, "w") as f:    f.write("# OSINT Recon Summary\n\n")    f.write("| Domain |cIP Address | Registrar | Timestamp |\n")    f.write("|________|_____________|___________|___________|\n")    for entry in summary:        domain = entry.get("domain", "")        ip = entry.get("ip", "")        registrar = entry.get("whois", {}).get("registrar", "")        timestamp = entry.get("timestamp", "")        f.write(f"| {domain} | {ip} | {registrar} | {timestamp} |\n")        print(f"Markdown summary saved: {md_path}")